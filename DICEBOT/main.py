import asyncio
from contextlib import suppress

from aiogram import Router, Bot, Dispatcher, F
from aiogram.types import Message
from aiogram.filters import CommandStart, Command
from aiogram.enums import DiceEmoji, ParseMode
from aiogram.utils.markdown import hcode
from aiogram.utils.keyboard import ReplyKeyboardBuilder

from app.requests import (
    insert_user, get_data, start_search, set_balance, give_me_rival, get_rival_id, 
    update_dice_value, get_dice_value, increment_win, increment_losses, increment_tie, 
    reset_game_state, get_balance, update_balance, create_deposit_request, 
    get_pending_deposits, update_deposit_status, create_withdrawal_request
)
from app import keyboard as kb
from app import tron_utils

router = Router()

# –°–ª–æ–≤–∞—Ä–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ –¥–µ–ø–æ–∑–∏—Ç–∞–º –∏ –≤—ã–≤–æ–¥–∞–º
deposit_pending = {}
withdraw_pending = {}

@router.message(Command("start"))
async def start_btn(message: Message):
    await message.answer("–ù—É –ø—Ä–∏–≤–µ—Ç! –ì–æ—Ç–æ–≤ –µ–±–∞—à–∏—Ç—å? –ñ–º–∏ '–ù–ê–ß–ê–¢–¨', –µ—Å–ª–∏ –¥–∞", reply_markup=kb.search_kb)
    user = message.from_user.id
    await insert_user(id=user, id2=user)

@router.message(F.text == "–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫")
async def search_btn(message: Message):
    await message.answer("–ò—â–µ–º –¥–ª—è —Ç–µ–±—è —Å–æ–ø–µ—Ä–Ω–∏–∫–∞. –ñ–¥–∏!", reply_markup=kb.back_to_main)
    user = message.from_user.id
    await start_search(id=user, status=1)
    await set_balance(id=user, balance=100)

    async def background_rival_search():
        while True:
            matched = await give_me_rival(id=user)
            if matched:
                await message.answer("–ù–∞—à–µ–ª—Å—è –¥–ª—è —Ç–µ–±—è —Å–æ–ø–µ—Ä–Ω–∏–∫–∞. –ü–æ–≥–Ω–∞–ª–∏!", reply_markup=kb.startgame_kb)
                break
            await asyncio.sleep(3)

    asyncio.create_task(background_rival_search())

@router.message(F.text == "–ó–∞–ø—É—Å—Ç–∏—Ç—å –∏–≥—Ä—É")
async def play_btn(message: Message):
    await message.answer("–ë—Ä–æ—Å–∞–π –∫—É–±–∏–∫, –µ–ø—Ç–∞! –í–æ–Ω –∫–Ω–æ–ø–∫–∞ –µ—Å—Ç—å –¥–ª—è —ç—Ç–æ–≥–æ. –ñ–º—è–∫–∞–π –µ–µ!", reply_markup=kb.throwdice_kb)

@router.message(F.text == "–ö–∏–Ω—É—Ç—å –∫—É–±–∏–∫!")
async def throw_button(message: Message):
    user_id_val = message.from_user.id

    balance = await get_balance(user_id=user_id_val)
    if balance <= 0:
        await message.answer("–£ —Ç–µ–±—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–±–æ–∫, —á—Ç–æ–±—ã –∏–≥—Ä–∞—Ç—å. –ü–æ–ø–æ–ª–Ω–∏ –±–∞–ª–∞–Ω—Å!")
        return

    rival_id_val = await get_rival_id(user_id=user_id_val)
    if not rival_id_val:
        await message.answer("–°–æ–ø–µ—Ä–Ω–∏–∫ —á–µ-—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π –∑–∞–Ω–æ–≤–æ!")
        return

    rival_balance = await get_balance(user_id=rival_id_val)
    if rival_balance <= 0:
        await message.answer("–£ —Ç–≤–æ–µ–≥–æ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–±–æ–∫ –¥–ª—è –∏–≥—Ä—ã. –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        await message.bot.send_message(rival_id_val, "–£ —Ç–µ–±—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –∏–≥—Ä—ã. –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        await reset_game_state(user_id=user_id_val, rival_id=rival_id_val)
        return

    existing_value = await get_dice_value(user_id=user_id_val)
    if existing_value and existing_value != 0:
        await message.answer("–¢—ã —É–∂–µ –∫–∏–Ω—É–ª –∫—É–±–∏–∫! –ñ–¥–∏, –ø–æ–∫–∞ —Å–æ–ø–µ—Ä–Ω–∏–∫ –∫–∏–Ω–µ—Ç —Å–≤–æ–π!")
        return

    dice1_message = await message.answer_dice(emoji="üé≤")
    dice2_message = await message.answer_dice(emoji="üé≤")
    await asyncio.sleep(3)
    dice1_value = dice1_message.dice.value
    dice2_value = dice2_message.dice.value
    total_value = dice1_value + dice2_value

    await update_dice_value(user_id=user_id_val, dice_value=total_value)
    await message.answer(f"–¢—ã –≤—ã–∫–∏–Ω—É–ª: {dice1_value} + {dice2_value} = {total_value}")

    rival_value_val = await get_dice_value(user_id=rival_id_val)
    if rival_value_val is None or rival_value_val == 0:
        await message.answer("–ñ–¥–µ–º, –ø–æ–∫–∞ —Ç–≤–æ–π —Å–æ–ø–µ—Ä–Ω–∏–∫ –±—Ä–æ—Å–∏—Ç –∫—É–±–∏–∫–∏!")
        return

    if total_value > rival_value_val:
        await message.answer("–ü–æ–±–µ–¥–∞! –¢—ã –≤—ã–∏–≥—Ä–∞–ª!")
        await message.bot.send_message(rival_id_val, "–¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª! –ù–µ —Ñ–∞—Ä—Ç–∞–Ω—É–ª–æ...")
        await update_balance(user_id=user_id_val, points=1)
        await update_balance(user_id=rival_id_val, points=-1)
        await increment_win(user_id=user_id_val)
        await increment_losses(user_id=rival_id_val)
    elif total_value < rival_value_val:
        await message.answer("–¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª! –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")
        await message.bot.send_message(rival_id_val, "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã –≤—ã–∏–≥—Ä–∞–ª!")
        await update_balance(user_id=user_id_val, points=-1)
        await update_balance(user_id=rival_id_val, points=1)
        await increment_losses(user_id=user_id_val)
        await increment_win(user_id=rival_id_val)
    else:
        await message.answer("–ù–∏—á—å—è! –£–¥–∞—á–∞ –±—ã–ª–∞ —Ä–∞–≤–Ω–æ–π.")
        await message.bot.send_message(rival_id_val, "–ù–∏—á—å—è!")
        await increment_tie(user_id=user_id_val)
        await increment_tie(user_id=rival_id_val)

    await update_dice_value(user_id=user_id_val, dice_value=0)
    await update_dice_value(user_id=rival_id_val, dice_value=0)

    new_balance = await get_balance(user_id=user_id_val)
    rival_balance = await get_balance(user_id=rival_id_val)
    await message.answer(f"–¢–≤–æ–π –±–∞–ª–∞–Ω—Å: {new_balance} –æ—á–∫–æ–≤. –ì–æ—Ç–æ–≤ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–≥—Ä—É?", reply_markup=kb.throwdice_kb)
    await message.bot.send_message(rival_id_val, f"–¢–≤–æ–π –±–∞–ª–∞–Ω—Å: {rival_balance} –æ—á–∫–æ–≤. –ü—Ä–æ–¥–æ–ª–∂–∏–º –∏–≥—Ä—É?", reply_markup=kb.throwdice_kb)

@router.message(F.text == "–ü–æ–∫–∏–Ω—É—Ç—å –∏–≥—Ä—É")
async def leave_game(message: Message):
    user_id_val = message.from_user.id
    rival_id_val = await get_rival_id(user_id=user_id_val)
    if not rival_id_val:
        await message.answer("–¢—ã –Ω–µ –≤ –∏–≥—Ä–µ! –ù–∞—á–Ω–∏ –ø–æ–∏—Å–∫ –Ω–æ–≤–æ–≥–æ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞!")
        return 
    await message.answer("–¢—ã –ø–æ–∫–∏–Ω—É–ª –∏–≥—Ä—É")
    await message.bot.send_message(rival_id_val, "–¢–≤–æ–π —Å–æ–ø–µ—Ä–Ω–∏–∫ –ø–æ–∫–∏–Ω—É–ª –∏–≥—Ä—É!")
    await reset_game_state(user_id=user_id_val, rival_id=rival_id_val)
    await message.answer("–ù–∞–∂–º–∏ –ü–û–ò–°–ö, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞!", reply_markup=kb.search_kb)
    await message.bot.send_message(rival_id_val, "–ù–∞–∂–º–∏ –ù–ê–ß–ê–¢–¨ –ü–û–ò–°–ö, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞!", reply_markup=kb.search_kb)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –¥–µ–ø–æ–∑–∏—Ç–∞ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ —Å—É–º–º—É)
@router.message(F.text == "–î–µ–ø–æ–∑–∏—Ç")
async def deposit_command(message: Message):
    user_id = message.from_user.id
    deposit_pending[user_id] = {}
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –¥–µ–ø–æ–∑–∏—Ç–∞:")

@router.message(lambda message: message.from_user.id in deposit_pending and 'amount' not in deposit_pending[message.from_user.id])
async def deposit_amount_handler(message: Message):
    user_id = message.from_user.id
    try:
        amount = float(message.text)
        if amount <= 0:
            raise ValueError
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.")
        return
    deposit_pending[user_id]['amount'] = amount
    await create_deposit_request(playerid=user_id, amount=amount, sender_address="")
    await message.answer(f"–í–∞—à –¥–µ–ø–æ–∑–∏—Ç –Ω–∞ —Å—É–º–º—É {amount} USDT –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.")
    del deposit_pending[user_id]

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Å—Ä–µ–¥—Å—Ç–≤ (—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º –∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
@router.message(F.text == "–í—ã–≤–µ—Å—Ç–∏")
async def withdraw_command(message: Message):
    user_id = message.from_user.id
    withdraw_pending[user_id] = {}
    await message.answer("–í–≤–µ–¥–∏—Ç–µ USDT TRC20 –∞–¥—Ä–µ—Å –¥–ª—è –≤—ã–≤–æ–¥–∞:")

@router.message(lambda message: message.from_user.id in withdraw_pending and 'recipient_address' not in withdraw_pending[message.from_user.id])
async def withdraw_address_handler(message: Message):
    user_id = message.from_user.id
    recipient_address = message.text.strip()
    withdraw_pending[user_id]['recipient_address'] = recipient_address
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –≤—ã–≤–æ–¥–∞:")

@router.message(lambda message: message.from_user.id in withdraw_pending and 'recipient_address' in withdraw_pending[message.from_user.id] and 'amount' not in withdraw_pending[message.from_user.id])
async def withdraw_amount_handler(message: Message):
    user_id = message.from_user.id
    try:
        amount = float(message.text)
        if amount <= 0:
            raise ValueError
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É.")
        return
    balance = await get_balance(user_id)
    if amount > balance:
        await message.answer(f"–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –í–∞—à –±–∞–ª–∞–Ω—Å: {balance} USDT.")
        del withdraw_pending[user_id]
        return
    withdraw_pending[user_id]['amount'] = amount
    recipient_address = withdraw_pending[user_id]['recipient_address']
    txid = await tron_utils.send_usdt(recipient_address, amount)
    if txid:
        await update_balance(user_id, -amount)
        await create_withdrawal_request(playerid=user_id, amount=amount, recipient_address=recipient_address, status="completed", txid=txid)
        new_balance = await get_balance(user_id)
        await message.answer(f"–í—ã–≤–æ–¥ —É—Å–ø–µ—à–µ–Ω. TXID: {txid}. –í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance} USDT.")
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –≤—ã–≤–æ–¥–µ —Å—Ä–µ–¥—Å—Ç–≤
        await message.bot.send_message(206545259, f"–í—ã–≤–æ–¥ —Å—Ä–µ–¥—Å—Ç–≤: {amount} USDT —Å –∫–æ—à–µ–ª—å–∫–∞ {user_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. TXID: {txid}")
    else:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–≤–æ–¥–µ —Å—Ä–µ–¥—Å—Ç–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    del withdraw_pending[user_id]

# –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–µ–ø–æ–∑–∏—Ç–æ–≤ —Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
async def monitor_deposits(bot: Bot):
    while True:
        pending_deposits = await get_pending_deposits()
        for deposit in pending_deposits:
            deposit_id = deposit['id']
            playerid = deposit['playerid']
            amount = deposit['amount']
            txid = await tron_utils.check_deposit_by_amount_async(amount)
            if txid:
                await update_deposit_status(deposit_id, "confirmed", txid)
                await update_balance(playerid, amount)
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
                await bot.send_message(206545259, f"–î–µ–ø–æ–∑–∏—Ç –∑–∞—á–∏—Å–ª–µ–Ω: {amount} USDT —Å –∫–æ—à–µ–ª—å–∫–∞ {playerid}. TXID: {txid}")
                # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                await bot.send_message(playerid, f"–í–∞—à –¥–µ–ø–æ–∑–∏—Ç –≤ —Ä–∞–∑–º–µ—Ä–µ {amount} USDT —É—Å–ø–µ—à–Ω–æ –∑–∞—á–∏—Å–ª–µ–Ω. TXID: {txid}")
        await asyncio.sleep(30)

async def main() -> None:
    bot = Bot(token='7068307478:AAEPTE4OA9uInmFHh0Am-auyy1U-r6mCc_c')
    dp = Dispatcher()
    dp.include_router(router)
    # –ü–µ—Ä–µ–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –≤ –∑–∞–¥–∞—á—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–µ–ø–æ–∑–∏—Ç–æ–≤
    asyncio.create_task(monitor_deposits(bot))
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print('Bot is switched off')
