import asyncio
from contextlib import suppress

from aiogram import Router, Bot, Dispatcher, F
from aiogram.types import Message
from aiogram.filters import CommandStart, Command
from aiogram.enums import DiceEmoji, ParseMode
from aiogram.utils.markdown import hcode
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.enums import DiceEmoji

from app.requests import insert_user, get_data, start_search, set_balance, give_me_rival, get_rival_id, update_dice_value, get_dice_value, increment_win, increment_losses, increment_tie, reset_game_state, get_balance, update_balance
from app import keyboard as kb


router = Router()

@router.message(Command("start"))
async def start_btn(message:Message):
    await message.answer("–ù—É –ø—Ä–∏–≤–µ—Ç! –ì–æ—Ç–æ–≤ –µ–±–∞—à–∏—Ç—å? –ñ–º–∏ '–ù–ê–ß–ê–¢–¨', –µ—Å–ª–∏ –¥–∞", reply_markup=kb.search_kb)
    user = message.from_user.id
    await insert_user(id=user, id2=user)


@router.message(F.text == "–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫")
async def search_btn(message:Message):
   await message.answer("–ò—â–µ–º –¥–ª—è —Ç–µ–±—è —Å–æ–ø–µ—Ä–Ω–∏–∫–∞. –ñ–¥–∏!", reply_markup=kb.back_to_main)
   user = message.from_user.id
   await start_search(id=user,status=1)
   await set_balance(id=user, balance=100)

   async def background_rival_search():
      while True:
         matched = await give_me_rival(id=user)
         if matched:
            await message.answer("–ù–∞—à–µ–ª—Å—è –¥–ª—è —Ç–µ–±—è —Å–æ–ø–µ—Ä–Ω–∏–∫. –ü–æ–≥–Ω–∞–ª–∏!", reply_markup=kb.startgame_kb)
            break
         await asyncio.sleep(3)
  
   asyncio.create_task(background_rival_search())


@router.message(F.text == "–ó–∞–ø—É—Å—Ç–∏—Ç—å –∏–≥—Ä—É")
async def play_btn(message:Message):
   await message.answer("–ë—Ä–æ—Å–∞–π –∫—É–±–∏–∫, –µ–ø—Ç–∞! –í–æ–Ω –∫–Ω–æ–ø–∫–∞ –µ—Å—Ç—å –¥–ª—è —ç—Ç–æ–≥–æ. –ñ–º—è–∫–∞–π –µ–µ!", reply_markup=kb.throwdice_kb)


@router.message(F.text == "–ö–∏–Ω—É—Ç—å –∫—É–±–∏–∫!")
async def throw_button(message: Message):
    """Handles dice roll logic."""
    user_id_val = message.from_user.id

    # Check balance for the user
    balance = await get_balance(user_id=user_id_val)
    if balance <= 0:
        await message.answer("–£ —Ç–µ–±—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–±–æ–∫, —á—Ç–æ–±—ã –∏–≥—Ä–∞—Ç—å. –ü–æ–ø–æ–ª–Ω–∏ –±–∞–ª–∞–Ω—Å!")
        return

    # Check for rival
    rival_id_val = await get_rival_id(user_id=user_id_val)
    if not rival_id_val:
        await message.answer("–°–æ–ø–µ—Ä–Ω–∏–∫ —á–µ-—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π –∑–∞–Ω–æ–≤–æ!")
        return

    # Check balance for the rival
    rival_balance = await get_balance(user_id=rival_id_val)
    if rival_balance <= 0:
        await message.answer("–£ —Ç–≤–æ–µ–≥–æ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–±–æ–∫ –¥–ª—è –∏–≥—Ä—ã. –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        await message.bot.send_message(rival_id_val, "–£ —Ç–µ–±—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è –∏–≥—Ä—ã. –ò–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        await reset_game_state(user_id=user_id_val, rival_id=rival_id_val)
        return

    # Check if the user already rolled a dice this round
    existing_value = await get_dice_value(user_id=user_id_val)
    if existing_value and existing_value != 0:
        await message.answer("–¢—ã —É–∂–µ –∫–∏–Ω—É–ª –∫—É–±–∏–∫! –ñ–¥–∏, –ø–æ–∫–∞ —Å–æ–ø–µ—Ä–Ω–∏–∫ –∫–∏–Ω–µ—Ç —Å–≤–æ–π!")
        return

    # Bot rolls 2 dice
    dice1_message = await message.answer_dice(emoji="üé≤")
    dice2_message = await message.answer_dice(emoji="üé≤")
    await asyncio.sleep(3)  # Wait for animation to complete

    # Calculate total dice value
    dice1_value = dice1_message.dice.value
    dice2_value = dice2_message.dice.value
    total_value = dice1_value + dice2_value

    # Store result in the database
    await update_dice_value(user_id=user_id_val, dice_value=total_value)
    await message.answer(f"–¢—ã –≤—ã–∫–∏–Ω—É–ª: {dice1_value} + {dice2_value} = {total_value}")

    # Check if rival has already rolled
    rival_value_val = await get_dice_value(user_id=rival_id_val)
    if rival_value_val is None or rival_value_val == 0:
        await message.answer("–ñ–¥–µ–º, –ø–æ–∫–∞ —Ç–≤–æ–π —Å–æ–ø–µ—Ä–Ω–∏–∫ –±—Ä–æ—Å–∏—Ç –∫—É–±–∏–∫–∏!")
        return

    # Compare results
    if total_value > rival_value_val:
        await message.answer("–ü–æ–±–µ–¥–∞! –¢—ã –≤—ã–∏–≥—Ä–∞–ª!")
        await message.bot.send_message(rival_id_val, "–¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª! –ù–µ —Ñ–∞—Ä—Ç–∞–Ω—É–ª–æ...")
        await update_balance(user_id=user_id_val, points=1)  # Winner gains 1 point
        await update_balance(user_id=rival_id_val, points=-1)
        await increment_win(user_id=user_id_val)
        await increment_losses(user_id=rival_id_val)
    elif total_value < rival_value_val:
        await message.answer("–¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª! –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑.")
        await message.bot.send_message(rival_id_val, "–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã –≤—ã–∏–≥—Ä–∞–ª!")
        await update_balance(user_id=user_id_val, points=-1)  # Winner gains 1 point
        await update_balance(user_id=rival_id_val, points=1)
        await increment_losses(user_id=user_id_val)
        await increment_win(user_id=rival_id_val)
    else:
        await message.answer("–ù–∏—á—å—è! –£–¥–∞—á–∞ –±—ã–ª–∞ —Ä–∞–≤–Ω–æ–π.")
        await message.bot.send_message(rival_id_val, "–ù–∏—á—å—è!")
        await increment_tie(user_id=user_id_val)
        await increment_tie(user_id=rival_id_val)

    # Reset dice values
    await update_dice_value(user_id=user_id_val, dice_value=0)
    await update_dice_value(user_id=rival_id_val, dice_value=0)

    # Notify players of updated balances
    new_balance = await get_balance(user_id=user_id_val)
    rival_balance = await get_balance(user_id=rival_id_val)
    await message.answer(f"–¢–≤–æ–π –±–∞–ª–∞–Ω—Å: {new_balance} –æ—á–∫–æ–≤. –ì–æ—Ç–æ–≤ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∏–≥—Ä—É?", reply_markup=kb.throwdice_kb)
    await message.bot.send_message(rival_id_val, f"–¢–≤–æ–π –±–∞–ª–∞–Ω—Å: {rival_balance} –æ—á–∫–æ–≤. –ü—Ä–æ–¥–æ–ª–∂–∏–º –∏–≥—Ä—É?", reply_markup=kb.throwdice_kb)


@router.message(F.text == "–ü–æ–∫–∏–Ω—É—Ç—å –∏–≥—Ä—É")
async def leave_game(message:Message):
    user_id_val = message.from_user.id
    rival_id_val = await get_rival_id(user_id=user_id_val)

    if not rival_id_val:
        message.answer("–¢—ã –Ω–µ –≤ –∏–≥—Ä–µ! –ù–∞—á–Ω–∏ –ø–æ–∏—Å–∫ –Ω–æ–≤–æ–≥–æ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞!")
        return 
    
    await message.answer("–¢—ã –ø–æ–∫–∏–Ω—É–ª –∏–≥—Ä—É")
    await message.bot.send_message(rival_id_val, "–¢–≤–æ–π —Å–æ–ø–µ—Ä–Ω–∏–∫ –ø–æ–∫–∏–Ω—É–ª –∏–≥—Ä—É!")
    await reset_game_state(user_id=user_id_val, rival_id=rival_id_val)
    await message.answer("–ù–∞–∂–º–∏ –ü–û–ò–°–ö, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞!", reply_markup=kb.search_kb)
    await message.bot.send_message(rival_id_val, "–ù–∞–∂–º–∏ –ù–ê–ß–ê–¢–¨ –ü–û–ò–°–ö, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –Ω–æ–≤–æ–≥–æ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞!", reply_markup=kb.search_kb)

   
async def main() -> None:
    bot = Bot(token='7068307478:AAEPTE4OA9uInmFHh0Am-auyy1U-r6mCc_c')
    dp = Dispatcher()

    dp.include_router(router)

    await dp.start_polling(bot)


if __name__ == "__main__":
    try:
     asyncio.run(main())
    except KeyboardInterrupt:
        print('Bot is switched off')
