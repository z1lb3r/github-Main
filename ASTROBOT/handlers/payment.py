"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–ª–∞—Ç–µ–∂–∞–º–∏ –∏ –±–∞–ª–∞–Ω—Å–æ–º —á–µ—Ä–µ–∑ CrystalPay.
–í—Å–µ —Ä–∞—Å—á–µ—Ç—ã –≤–µ–¥—É—Ç—Å—è –≤ –±–∞–ª–ª–∞—Ö, –≥–¥–µ 1 –±–∞–ª–ª = 1 —Ä—É–±–ª—å.
"""

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.utils.keyboard import InlineKeyboardBuilder

from services.crystalpay import create_payment, check_payment
from services.db import add_to_balance, get_user_balance, get_transaction_history, get_referrals, activate_referral
from config import (
    MIN_REQUIRED_BALANCE,
    REFERRAL_REWARD_USD
)

router = Router()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—É–º–º—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
class DepositStates(StatesGroup):
    waiting_for_amount = State()

# –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
def get_deposit_keyboard():
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞.
    
    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
    """
    builder = InlineKeyboardBuilder()
    builder.button(
        text="üíµ –ü–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å",
        callback_data="deposit_balance"
    )
    builder.button(
        text="üìä –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π",
        callback_data="transaction_history"
    )
    return builder.as_markup()

# –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
def get_payment_keyboard():
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ–ø–ª–∞—Ç—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä—ã–º –∫–æ–¥–æ–º.
    
    Returns:
        InlineKeyboardMarkup: –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –æ–ø–ª–∞—Ç—ã
    """
    return get_deposit_keyboard()

@router.message(Command("balance"))
async def cmd_balance(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /balance.
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è.
    
    Args:
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ Telegram
    """
    print("–ö–æ–º–∞–Ω–¥–∞ /balance –ø–æ–ª—É—á–µ–Ω–∞")
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    balance = get_user_balance(message.from_user.id)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–∞–ª–∞–Ω—Å–µ –∏ –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è
    await message.answer(
        f"üìä –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance:.0f} –±–∞–ª–ª–æ–≤\n\n"
        f"–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å –±–æ—Ç–æ–º: {MIN_REQUIRED_BALANCE:.0f} –±–∞–ª–ª–æ–≤\n\n"
        "–î–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
        reply_markup=get_payment_keyboard()
    )

@router.message(Command("payment"))
async def cmd_payment(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /payment.
    –ü–µ—Ä–µ–∞–¥—Ä–µ—Å—É–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É /balance –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏.
    
    Args:
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ Telegram
    """
    print("–ö–æ–º–∞–Ω–¥–∞ /payment –ø–æ–ª—É—á–µ–Ω–∞, –ø–µ—Ä–µ–∞–¥—Ä–µ—Å–∞—Ü–∏—è –Ω–∞ /balance")
    await cmd_balance(message)

@router.callback_query(F.data == "deposit_balance")
async def process_deposit_start(callback: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞.
    –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è.
    
    Args:
        callback (CallbackQuery): Callback –∑–∞–ø—Ä–æ—Å –æ—Ç Telegram
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
    """
    await callback.answer()
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ—Å—Ç–æ—è–Ω–∏—é –æ–∂–∏–¥–∞–Ω–∏—è –≤–≤–æ–¥–∞ —Å—É–º–º—ã
    await state.set_state(DepositStates.waiting_for_amount)
    
    await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Ä—É–±–ª—è—Ö (–æ—Ç 100 –¥–æ 10 000 000):"
    )

@router.message(DepositStates.waiting_for_amount)
async def process_deposit_amount(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å—É–º–º—ã –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è.
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–µ–¥–µ–Ω–Ω–æ–π —Å—É–º–º—ã –∏ —Å–æ–∑–¥–∞–µ—Ç –ø–ª–∞—Ç–µ–∂.
    
    Args:
        message (Message): –°–æ–æ–±—â–µ–Ω–∏–µ Telegram
        state (FSMContext): –ö–æ–Ω—Ç–µ–∫—Å—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
    """
    try:
        # –ü–∞—Ä—Å–∏–º —Å—É–º–º—É, –∑–∞–º–µ–Ω—è—è –∑–∞–ø—è—Ç—ã–µ –Ω–∞ —Ç–æ—á–∫–∏
        amount = int(float(message.text.replace(',', '.').strip()))
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
        if amount < 100:
            await message.answer("‚ö†Ô∏è –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è 100 —Ä—É–±–ª–µ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –±–æ–ª—å—à–µ.")
            return
        
        if amount > 10000000:
            await message.answer("‚ö†Ô∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è 10 000 000 —Ä—É–±–ª–µ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –º–µ–Ω—å—à–µ.")
            return
        
    except ValueError:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –≤ —Ä—É–±–ª—è—Ö (–Ω–∞–ø—Ä–∏–º–µ—Ä, 500).")
        return
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É–º–º—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞
    await process_deposit(message, amount)

async def process_deposit(message_or_callback, deposit_amount=None):
    """
    –°–æ–∑–¥–∞–µ—Ç –ø–ª–∞—Ç–µ–∂ –≤ CrystalPay –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É.
    
    Args:
        message_or_callback: –°–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ Callback
        deposit_amount (int, optional): –°—É–º–º–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤ —Ä—É–±–ª—è—Ö
    """
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä Message –∏–ª–∏ CallbackQuery
    is_callback = hasattr(message_or_callback, 'message')
    
    if is_callback:
        user_id = message_or_callback.from_user.id
        await message_or_callback.answer("–°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞...")
        msg_object = message_or_callback.message
    else:
        user_id = message_or_callback.from_user.id
        msg_object = message_or_callback
    
    # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –≤ CrystalPay (–≤ —Ä—É–±–ª—è—Ö)
    success, result = await create_payment(user_id, deposit_amount)
    
    if success:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∞
        invoice_id = result.get("id", "")
        payment_url = result.get("url", "")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É
        builder = InlineKeyboardBuilder()
        builder.button(text="–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", url=payment_url)
        builder.button(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã", callback_data=f"check_deposit:{invoice_id}:{deposit_amount}")
        
        await msg_object.answer(
            "–ü–ª–∞—Ç–µ–∂ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n"
            "–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ. –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã "
            f"–≤–∞—à –±–∞–ª–∞–Ω—Å –±—É–¥–µ—Ç –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {deposit_amount} –±–∞–ª–ª–æ–≤.\n\n"
            "–ï—Å–ª–∏ –≤—ã —É–∂–µ –æ–ø–ª–∞—Ç–∏–ª–∏, –Ω–æ –±–∞–ª–∞–Ω—Å –Ω–µ –æ–±–Ω–æ–≤–∏–ª—Å—è, "
            "–≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞.",
            reply_markup=builder.as_markup()
        )
    else:
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        error_message = result.get("error", "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞: {error_message}")
        
        await msg_object.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞: {error_message}")

@router.callback_query(F.data.startswith("check_deposit:"))
async def check_deposit_status(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞.
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –≤ CrystalPay –∏ –ø–æ–ø–æ–ª–Ω—è–µ—Ç –±–∞–ª–∞–Ω—Å, –µ—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ –∑–∞–≤–µ—Ä—à–µ–Ω.
    
    Args:
        callback (CallbackQuery): Callback –∑–∞–ø—Ä–æ—Å –æ—Ç Telegram
    """
    await callback.answer("–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞...")
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –ø–ª–∞—Ç–µ–∂–∞ –∏ —Å—É–º–º—É –∏–∑ callback_data
    parts = callback.data.split(":")
    invoice_id = parts[1]
    deposit_amount = int(float(parts[2])) if len(parts) > 2 else 0
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –≤ CrystalPay
    success, result = await check_payment(invoice_id)
    
    if success:
        is_paid = result.get("is_paid", False)
        state = result.get("state", "")
        
        if is_paid:
            # –ï—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ –æ–ø–ª–∞—á–µ–Ω, –ø–æ–ø–æ–ª–Ω—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–ª–ª–∞—Ö
            user_id = callback.from_user.id
            new_balance = add_to_balance(
                user_id, 
                deposit_amount,  # –°—É–º–º–∞ –≤ –±–∞–ª–ª–∞—Ö —Ä–∞–≤–Ω–∞ —Å—É–º–º–µ –≤ —Ä—É–±–ª—è—Ö
                f"–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ —á–µ—Ä–µ–∑ CrystalPay (Invoice ID: {invoice_id})",
                "RUB",  # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –≤–∞–ª—é—Ç–∞
                deposit_amount  # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è —Å—É–º–º–∞
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏—à–µ–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ –∏ –∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –µ—ë
            referrals = get_referrals(user_id)
            if referrals and any(ref['status'] == 'pending' for ref in referrals):
                # –≠—Ç–æ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å–≤—è–∑—å –∏ –Ω–∞—á–∏—Å–ª–∏—Ç –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ —Ä–µ—Ñ–µ—Ä–µ—Ä—É
                activate_referral(user_id, deposit_amount)
                
                await callback.message.answer(
                    "üéâ –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∞!\n\n"
                    f"–í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {deposit_amount} –±–∞–ª–ª–æ–≤.\n"
                    f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {new_balance:.0f} –±–∞–ª–ª–æ–≤\n\n"
                    "–í—ã –ø—Ä–∏—à–ª–∏ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ - –≤–∞—à —Ä–µ—Ñ–µ—Ä–µ—Ä –ø–æ–ª—É—á–∏–ª –≤–æ–∑–Ω–∞–≥—Ä–∞–∂–¥–µ–Ω–∏–µ!"
                )
            else:
                await callback.message.answer(
                    "üéâ –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∞!\n\n"
                    f"–í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {deposit_amount} –±–∞–ª–ª–æ–≤.\n"
                    f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {new_balance:.0f} –±–∞–ª–ª–æ–≤\n\n"
                    "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞."
                )
        elif state == "pending" or state == "processing":
            # –ï—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ –µ—â–µ –≤ –æ–∂–∏–¥–∞–Ω–∏–∏ –∏–ª–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ
            await callback.message.answer(
                "–í–∞—à –ø–ª–∞—Ç–µ–∂ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ.\n\n"
                "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞ –æ–ø–ª–∞—Ç—ã. "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å –ø–æ–∑–∂–µ."
            )
        else:
            # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞ –¥—Ä—É–≥–æ–π (failed –∏ —Ç.–¥.)
            await callback.message.answer(
                f"–°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞: {state}.\n\n"
                "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã —Å –æ–ø–ª–∞—Ç–æ–π, "
                "–ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–ª–∞—Ç–µ–∂ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π."
            )
    else:
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞
        error_message = result.get("error", "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞.")
        await callback.message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞—Ç–µ–∂–∞: {error_message}")

@router.callback_query(F.data == "transaction_history")
async def show_transaction_history(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    
    Args:
        callback (CallbackQuery): Callback –∑–∞–ø—Ä–æ—Å –æ—Ç Telegram
    """
    await callback.answer("–ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π...")
    
    # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    transactions = get_transaction_history(callback.from_user.id)
    
    if not transactions:
        await callback.message.answer("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.")
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏—Å—Ç–æ—Ä–∏–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
    message_text = "üìú –ò—Å—Ç–æ—Ä–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:\n\n"
    
    for tx in transactions:
        tx_type = "–ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ" if tx["type"] == "deposit" else "—Å–ø–∏—Å–∞–Ω–∏–µ"
        amount = tx["amount"]
        date = tx["created_at"]
        description = tx["description"]
        orig_currency = tx.get("original_currency", "RUB")
        orig_amount = tx.get("original_amount", abs(amount))
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Å—É–º–º—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ –±–∞–ª–ª–∞—Ö –∏ –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–π –≤–∞–ª—é—Ç–µ, –µ—Å–ª–∏ –æ–Ω–∏ —Ä–∞–∑–Ω—ã–µ
        if orig_currency != "RUB":
            message_text += f"‚Ä¢ {date}: {tx_type} –Ω–∞ —Å—É–º–º—É {abs(amount):.0f} –±–∞–ª–ª–æ–≤ "
            message_text += f"({abs(orig_amount):.2f} {orig_currency}) - {description}\n\n"
        else:
            message_text += f"‚Ä¢ {date}: {tx_type} –Ω–∞ —Å—É–º–º—É {abs(amount):.0f} –±–∞–ª–ª–æ–≤ - {description}\n\n"
    
    await callback.message.answer(message_text)

# –î–æ–±–∞–≤–∏–º —Ç–µ—Å—Ç–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
@router.message(Command("test_deposit"))
async def cmd_test_deposit(message: Message):
    """
    –¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ –±–µ–∑ –æ–ø–ª–∞—Ç—ã.
    –¢–æ–ª—å–∫–æ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è!
    """
    user_id = message.from_user.id
    amount = 500  # –ë–∞–ª–ª—ã (—Ä—É–±–ª–∏)
    new_balance = add_to_balance(user_id, amount, "–¢–µ—Å—Ç–æ–≤–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞")
    await message.answer(f"–¢–µ—Å—Ç–æ–≤–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –Ω–∞ {amount} –±–∞–ª–ª–æ–≤! –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {new_balance:.0f} –±–∞–ª–ª–æ–≤")

@router.message(Command("pay"))
async def cmd_pay(message: Message):
    """
    –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è /balance.
    """
    await cmd_balance(message)