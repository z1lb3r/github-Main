"""
Consultation mode system implementation.
This allows the bot to track whether a user is in consultation mode
and only charge the balance during consultations.
"""

import time
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, BufferedInputFile
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder

from config import MIN_REQUIRED_BALANCE, AUDIO_CONVERSION_COST, MAX_AUDIO_TEXT_LENGTH
from services.db import get_user_balance, subtract_from_balance, save_message
from services.speech_service import text_to_speech, synthesize_long_text

router = Router()

# Function to start consultation mode
async def start_consultation_mode(user_id: int, state: FSMContext):
    """
    Starts the consultation mode for a user.
    
    Args:
        user_id (int): ID of the user
        state (FSMContext): FSM context
    """
    # Set consultation mode flag in state
    await state.update_data(in_consultation=True)
    await state.update_data(consultation_start_time=time.time())
    
    print(f"User {user_id} started consultation mode")

# Function to end consultation mode
async def end_consultation_mode(user_id: int, state: FSMContext):
    """
    Ends the consultation mode for a user.
    
    Args:
        user_id (int): ID of the user
        state (FSMContext): FSM context
    """
    # Get current state data
    data = await state.get_data()
    
    # Calculate consultation duration
    start_time = data.get("consultation_start_time", 0)
    duration = time.time() - start_time if start_time else 0
    
    # Reset consultation mode flag
    await state.update_data(in_consultation=False)
    await state.update_data(consultation_start_time=None)
    
    print(f"User {user_id} ended consultation mode. Duration: {duration:.2f} seconds")
    
    return duration

# Function to check if user is in consultation mode
async def is_in_consultation(state: FSMContext) -> bool:
    """
    Checks if a user is currently in consultation mode.
    
    Args:
        state (FSMContext): FSM context
        
    Returns:
        bool: True if user is in consultation mode, False otherwise
    """
    data = await state.get_data()
    is_active = data.get("in_consultation", False)
    print(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∂–∏–º–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏: {is_active}")
    return is_active

# Function to generate end consultation keyboard
def get_end_consultation_keyboard():
    """
    Creates a keyboard with 'End Consultation' and 'Convert to Audio' buttons.
    
    Returns:
        InlineKeyboardMarkup: Keyboard with consultation buttons
    """
    builder = InlineKeyboardBuilder()
    builder.button(
        text="‚õî –ó–∞–≤–µ—Ä—à–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é",
        callback_data="end_consultation"
    )
    builder.button(
        text="üîä –•–æ—á—É –≤ –≤–∏–¥–µ –∞—É–¥–∏–æ —Å–æ–æ–±—â–µ–Ω–∏—è!",
        callback_data="convert_to_audio"
    )
    return builder.as_markup()

# Function to handle consultation start
async def handle_consultation_start(callback: CallbackQuery, state: FSMContext):
    """
    Handler for starting a consultation.
    
    Args:
        callback (CallbackQuery): Callback query
        state (FSMContext): FSM context
    """
    from .keyboards import main_menu_kb
    
    user_id = callback.from_user.id
    balance = get_user_balance(user_id)
    
    # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
    print(f"–ó–∞–ø—É—Å–∫ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏: user_id={user_id}, –±–∞–ª–∞–Ω—Å={balance:.0f} –±–∞–ª–ª–æ–≤, –º–∏–Ω–∏–º—É–º={MIN_REQUIRED_BALANCE:.0f} –±–∞–ª–ª–æ–≤")
    
    # Check if user has enough balance
    if balance < MIN_REQUIRED_BALANCE:
        await callback.message.answer(
            f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏.\n\n"
            f"–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance:.0f} –±–∞–ª–ª–æ–≤\n"
            f"–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: {MIN_REQUIRED_BALANCE:.0f} –±–∞–ª–ª–æ–≤\n\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å.",
            reply_markup=main_menu_kb
        )
        return
    
    # Start consultation mode
    await start_consultation_mode(user_id, state)
    
    await callback.message.answer(
        "üîÆ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –Ω–∞—á–∞—Ç–∞!\n\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã –æ –≤–∞—à–µ–º –∞–Ω–∞–ª–∏–∑–µ Human Design. "
        "–ë–∞–ª–∞–Ω—Å –±—É–¥–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏.\n\n"
        "–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ó–∞–≤–µ—Ä—à–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é'.",
        reply_markup=get_end_consultation_keyboard()
    )

# Function to handle consultation end
async def handle_consultation_end(callback: CallbackQuery, state: FSMContext):
    """
    Handler for ending a consultation.
    
    Args:
        callback (CallbackQuery): Callback query
        state (FSMContext): FSM context
    """
    from .keyboards import main_menu_kb
    from .change_data import get_updated_main_menu_keyboard  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç
    
    user_id = callback.from_user.id
    
    # End consultation mode and get duration
    duration = await end_consultation_mode(user_id, state)
    
    # Get current balance
    balance = get_user_balance(user_id)
    print(f"–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏: user_id={user_id}, —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å={balance:.0f} –±–∞–ª–ª–æ–≤")
    
    # Calculate minutes and seconds
    minutes = int(duration // 60)
    seconds = int(duration % 60)
    
    await callback.message.answer(
        f"‚úÖ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
        f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {minutes} –º–∏–Ω. {seconds} —Å–µ–∫.\n"
        f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance:.0f} –±–∞–ª–ª–æ–≤\n\n"
        f"–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.",
        reply_markup=get_updated_main_menu_keyboard()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    )

# Handler for converting the last bot response to audio
@router.callback_query(F.data == "convert_to_audio")
async def convert_to_audio_handler(callback: CallbackQuery, state: FSMContext):
    """
    Handler for converting the last bot response to audio.
    
    Args:
        callback (CallbackQuery): Callback query
        state (FSMContext): FSM context
    """
    await callback.answer()
    user_id = callback.from_user.id
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ä–µ–∂–∏–º–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
    in_consultation = await is_in_consultation(state)
    if not in_consultation:
        await callback.message.answer(
            "–í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —Ä–µ–∂–∏–º–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏. "
            "–î–ª—è –Ω–∞—á–∞–ª–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –ø—É–Ω–∫—Ç –≤ –º–µ–Ω—é."
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    from services.db import get_last_messages
    messages = get_last_messages(user_id, 5)  # –ü–æ–ª—É—á–∞–µ–º 5 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    
    # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞
    bot_messages = [msg for msg in messages if msg['sender'] == 'bot' and not msg['is_summary']]
    
    if not bot_messages:
        await callback.message.answer(
            "–ù–µ –Ω–∞–π–¥–µ–Ω–æ –æ—Ç–≤–µ—Ç–æ–≤ –±–æ—Ç–∞ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ –∞—É–¥–∏–æ. "
            "–ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç."
        )
        return
    
    # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç –±–æ—Ç–∞
    last_response = bot_messages[-1]['content']
    
    # –£–¥–∞–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∏ –±–∞–ª–∞–Ω—Å–µ, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
    if "üí∏ –°—Ç–æ–∏–º–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞:" in last_response:
        last_response = last_response.split("üí∏ –°—Ç–æ–∏–º–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞:")[0].strip()
    
    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
    if len(last_response) > MAX_AUDIO_TEXT_LENGTH:
        last_response = last_response[:MAX_AUDIO_TEXT_LENGTH] + "... (—Ç–µ–∫—Å—Ç —Å–æ–∫—Ä–∞—â–µ–Ω –¥–ª—è –∞—É–¥–∏–æ-—Å–æ–æ–±—â–µ–Ω–∏—è)"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    balance = get_user_balance(user_id)
    
    if balance < AUDIO_CONVERSION_COST:
        await callback.message.answer(
            f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ –∞—É–¥–∏–æ!\n\n"
            f"–°—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {AUDIO_CONVERSION_COST} –±–∞–ª–ª–æ–≤\n"
            f"–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance:.0f} –±–∞–ª–ª–æ–≤\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å."
        )
        return
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –Ω–∞—á–∞–ª–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
    status_message = await callback.message.answer(
        f"üîÑ –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é —Ç–µ–∫—Å—Ç –≤ –∞—É–¥–∏–æ-—Å–æ–æ–±—â–µ–Ω–∏–µ...\n"
        f"–° –≤–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ –±—É–¥–µ—Ç —Å–ø–∏—Å–∞–Ω–æ {AUDIO_CONVERSION_COST} –±–∞–ª–ª–æ–≤."
    )
    
    try:
        # –°–ø–∏—Å—ã–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ –∑–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é
        subtract_success = subtract_from_balance(
            user_id, 
            AUDIO_CONVERSION_COST, 
            "–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –≤ –∞—É–¥–∏–æ"
        )
        
        if not subtract_success:
            await status_message.edit_text(
                "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–ø–∏—Å–∞–Ω–∏–∏ —Å—Ä–µ–¥—Å—Ç–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
            return
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –≤ –∞—É–¥–∏–æ
        if len(last_response) > 4500:  # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –¥–ª–∏–Ω–Ω—ã–π
            audio_data = await synthesize_long_text(last_response)
        else:
            audio_data = await text_to_speech(last_response)
        
        # –ü–µ—Ä–µ–º–æ—Ç–∞–µ–º BytesIO –≤ –Ω–∞—á–∞–ª–æ, —á—Ç–æ–±—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø—Ä–æ—á–∏—Ç–∞—Ç—å –¥–∞–Ω–Ω—ã–µ
        audio_data.seek(0)
        audio_bytes = audio_data.read()
        
        # –°–æ–∑–¥–∞–µ–º InputFile –∏–∑ –±–∞–π—Ç–æ–≤
        voice_file = BufferedInputFile(audio_bytes, filename="audio_message.ogg")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ-—Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback.message.answer_voice(
            voice=voice_file,
            caption="üîä –ê—É–¥–∏–æ-–≤–µ—Ä—Å–∏—è –æ—Ç–≤–µ—Ç–∞ –±–æ—Ç–∞"
        )
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Å—Ç–∞—Ç—É—Å–µ
        await status_message.delete()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –±–∞–ª–∞–Ω—Å
        new_balance = get_user_balance(user_id)
        await callback.message.answer(
            f"‚úÖ –ê—É–¥–∏–æ-—Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!\n"
            f"üí∞ –í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {new_balance:.0f} –±–∞–ª–ª–æ–≤",
            reply_markup=get_end_consultation_keyboard()
        )
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ –∞—É–¥–∏–æ: {str(e)}")
        await status_message.edit_text(
            f"‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ –≤ –∞—É–¥–∏–æ: {str(e)}\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å –¥—Ä—É–≥–∏–º —Ç–µ–∫—Å—Ç–æ–º."
        )

# Register callback handlers
@router.callback_query(F.data == "start_consultation")
async def consultation_start_handler(callback: CallbackQuery, state: FSMContext):
    """
    Handler for starting a consultation from callback query.
    """
    await callback.answer()
    await handle_consultation_start(callback, state)

@router.callback_query(F.data == "end_consultation")
async def consultation_end_handler(callback: CallbackQuery, state: FSMContext):
    """
    Handler for ending a consultation from callback query.
    """
    await callback.answer()
    await handle_consultation_end(callback, state)