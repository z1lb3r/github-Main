"""
Consultation mode system implementation.
This allows the bot to track whether a user is in consultation mode
and only charge the balance during consultations.
"""

import time
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder

from config import MIN_REQUIRED_BALANCE
from services.db import get_user_balance

router = Router()

# Function to start consultation mode
async def start_consultation_mode(user_id: int, state: FSMContext):
    """
    Starts the consultation mode for a user.
    
    Args:
        user_id (int): ID of the user
        state (FSMContext): FSM context
    """
    # Set consultation mode flag in state
    await state.update_data(in_consultation=True)
    await state.update_data(consultation_start_time=time.time())
    
    # Clear previous conversation history if any
    await state.update_data(conversation_history="")
    
    print(f"User {user_id} started consultation mode")

# Function to end consultation mode
async def end_consultation_mode(user_id: int, state: FSMContext):
    """
    Ends the consultation mode for a user.
    
    Args:
        user_id (int): ID of the user
        state (FSMContext): FSM context
    """
    # Get current state data
    data = await state.get_data()
    
    # Calculate consultation duration
    start_time = data.get("consultation_start_time", 0)
    duration = time.time() - start_time if start_time else 0
    
    # Reset consultation mode flag
    await state.update_data(in_consultation=False)
    await state.update_data(consultation_start_time=None)
    
    print(f"User {user_id} ended consultation mode. Duration: {duration:.2f} seconds")
    
    return duration

# Function to check if user is in consultation mode
async def is_in_consultation(state: FSMContext) -> bool:
    """
    Checks if a user is currently in consultation mode.
    
    Args:
        state (FSMContext): FSM context
        
    Returns:
        bool: True if user is in consultation mode, False otherwise
    """
    data = await state.get_data()
    is_active = data.get("in_consultation", False)
    print(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∂–∏–º–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏: {is_active}")
    return is_active

# Function to generate end consultation keyboard
def get_end_consultation_keyboard():
    """
    Creates a keyboard with an 'End Consultation' button.
    
    Returns:
        InlineKeyboardMarkup: Keyboard with end consultation button
    """
    builder = InlineKeyboardBuilder()
    builder.button(
        text="‚õî –ó–∞–≤–µ—Ä—à–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é",
        callback_data="end_consultation"
    )
    return builder.as_markup()

# Function to handle consultation start
async def handle_consultation_start(callback: CallbackQuery, state: FSMContext):
    """
    Handler for starting a consultation.
    
    Args:
        callback (CallbackQuery): Callback query
        state (FSMContext): FSM context
    """
    from .keyboards import main_menu_kb
    
    user_id = callback.from_user.id
    balance = get_user_balance(user_id)
    
    # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥
    print(f"–ó–∞–ø—É—Å–∫ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏: user_id={user_id}, –±–∞–ª–∞–Ω—Å={balance:.0f} –±–∞–ª–ª–æ–≤, –º–∏–Ω–∏–º—É–º={MIN_REQUIRED_BALANCE:.0f} –±–∞–ª–ª–æ–≤")
    
    # Check if user has enough balance
    if balance < MIN_REQUIRED_BALANCE:
        await callback.message.answer(
            f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏.\n\n"
            f"–í–∞—à —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance:.0f} –±–∞–ª–ª–æ–≤\n"
            f"–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: {MIN_REQUIRED_BALANCE:.0f} –±–∞–ª–ª–æ–≤\n\n"
            f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å.",
            reply_markup=main_menu_kb
        )
        return
    
    # Start consultation mode
    await start_consultation_mode(user_id, state)
    
    await callback.message.answer(
        "üîÆ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –Ω–∞—á–∞—Ç–∞!\n\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã –æ –≤–∞—à–µ–º –∞–Ω–∞–ª–∏–∑–µ Human Design. "
        "–ë–∞–ª–∞–Ω—Å –±—É–¥–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –≤ —Ä–µ–∂–∏–º–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏.\n\n"
        "–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ó–∞–≤–µ—Ä—à–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é'.",
        reply_markup=get_end_consultation_keyboard()
    )

# Function to handle consultation end
async def handle_consultation_end(callback: CallbackQuery, state: FSMContext):
    """
    Handler for ending a consultation.
    
    Args:
        callback (CallbackQuery): Callback query
        state (FSMContext): FSM context
    """
    from .keyboards import main_menu_kb
    from .change_data import get_updated_main_menu_keyboard  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç
    
    user_id = callback.from_user.id
    
    # End consultation mode and get duration
    duration = await end_consultation_mode(user_id, state)
    
    # Get current balance
    balance = get_user_balance(user_id)
    print(f"–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏: user_id={user_id}, —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å={balance:.0f} –±–∞–ª–ª–æ–≤")
    
    # Calculate minutes and seconds
    minutes = int(duration // 60)
    seconds = int(duration % 60)
    
    await callback.message.answer(
        f"‚úÖ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
        f"–ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {minutes} –º–∏–Ω. {seconds} —Å–µ–∫.\n"
        f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {balance:.0f} –±–∞–ª–ª–æ–≤\n\n"
        f"–°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –Ω–∞—à–µ–≥–æ —Å–µ—Ä–≤–∏—Å–∞. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.",
        reply_markup=get_updated_main_menu_keyboard()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    )

# Register callback handlers
@router.callback_query(F.data == "start_consultation")
async def consultation_start_handler(callback: CallbackQuery, state: FSMContext):
    """
    Handler for starting a consultation from callback query.
    """
    await callback.answer()
    await handle_consultation_start(callback, state)

@router.callback_query(F.data == "end_consultation")
async def consultation_end_handler(callback: CallbackQuery, state: FSMContext):
    """
    Handler for ending a consultation from callback query.
    """
    await callback.answer()
    await handle_consultation_end(callback, state)